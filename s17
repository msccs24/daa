Q1
#include <stdio.h>
#include <stdbool.h>

#define MAX 20

int board[MAX], n;

// Function to print the board configuration
void printSolution() {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (board[i] == j)
                printf("Q ");
            else
                printf(". ");
        }
        printf("\n");
    }
    printf("\n");
}

// Check if a queen can be placed at row r and column c
bool isSafe(int r, int c) {
    for (int i = 0; i < r; i++) {
        if (board[i] == c ||               // Same column
            board[i] - i == c - r ||       // Same major diagonal
            board[i] + i == c + r)         // Same minor diagonal
            return false;
    }
    return true;
}

// Recursive function to solve N-Queens
void solveNQueens(int row) {
    if (row == n) {
        printSolution();  // All queens are placed
        return;
    }

    for (int col = 0; col < n; col++) {
        if (isSafe(row, col)) {
            board[row] = col;
            solveNQueens(row + 1);
            // Backtrack is implicit here by overwriting board[row]
        }
    }
}

int main() {
    printf("Enter the value of N (number of queens): ");
    scanf("%d", &n);

    if (n < 1 || n > MAX) {
        printf("Invalid value of N. Please use 1 <= N <= %d.\n", MAX);
        return 1;
    }

    printf("Solutions for %d-Queens problem:\n\n", n);
    solveNQueens(0);

    return 0;
}


Q2
// C Program for 0-1 KnapSack Problem using Recursion
#include <stdio.h>
// Function to find maximum between two numbers
int max(int a, int b)
{
    if (a > b)
        return a;
    return b;
}

// Returns the maximum value that can be put in a knapsack
// of capacity W
int knapsackRecursive(int W, int wt[], int val[], int n)
{
    // Base Case
    if (n == 0 || W == 0)
        return 0;

    if (wt[n - 1] > W)
        return knapsackRecursive(W, wt, val, n - 1);

    else
        return max(val[n - 1]
                       + knapsackRecursive(W - wt[n - 1],
                                           wt, val, n - 1),
                   knapsackRecursive(W, wt, val, n - 1));
}
// Driver Code
int main()
{
    int i,n,W,weight[100],values[100];
    printf("Enter the number of items :");
     scanf("%d",&n);   
    for (i = 0; i < n; i++)
    {
        printf("Enter Weight and Profit for item[%d] :\n",i);
        scanf("%d %d", &weight[i], &values[i]);
    } 
    printf("Enter the capacity of knapsack :\n");
    scanf("%d",&W);

    // Output the maximum profit for the knapSack
    printf(
        "Maximum value that can be put in knapsack: %d\n",
        knapsackRecursive(W, weight, values, n));

    return 0;
}

