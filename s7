Q1
#include <stdio.h>
#define infinity 999
void dij(int n, int v, int cost[10][10], int dist[100])
{
    int i, u, count, w, flag[10], min;
    for (i = 1; i <= n; i++)
        flag[i] = 0, dist[i] = cost[v][i];
    count = 2;
    while (count <= n)
    {
        min = 99;
        for (w = 1; w <= n; w++)
            if (dist[w] < min && !flag[w])
                min = dist[w], u = w;
        flag[u] = 1;
        count++;
        for (w = 1; w <= n; w++)
            if ((dist[u] + cost[u][w] < dist[w]) && !flag[w])
                dist[w] = dist[u] + cost[u][w];
    }
}
void main()
{
    int n, v, i, j, cost[10][10], dist[10];
    printf("\n Enter the number of nodes:");
    scanf("%d", &n);
    printf("\n Enter the cost matrix:\n");
    for (i = 1; i <= n; i++)
        for (j = 1; j <= n; j++)
        {
            scanf("%d", &cost[i][j]);
            if (cost[i][j] == 0)
                cost[i][j] = infinity;
        }
    printf("\n Enter the source matrix:");
    scanf("%d", &v);
    dij(n, v, cost, dist);
    printf("\n Shortest path:\n");
    for (i = 1; i <= n; i++)
        if (i != v)
            printf("%d->%d,cost=%d\n", v, i, dist[i]);
}

Q2
#include <stdio.h>
#include <stdlib.h>

#define MAX 100

int adj[MAX][MAX];   // Adjacency matrix
int visited[MAX];    // Visited array
int stack[MAX];      // Stack to store topological order
int top = -1;

// Function to add edge
void addEdge(int u, int v) {
    adj[u][v] = 1;
}

// DFS function for topological sort
void dfs(int v, int vertices) {
    visited[v] = 1;

    for (int i = 0; i < vertices; i++) {
        if (adj[v][i] && !visited[i]) {
            dfs(i, vertices);
        }
    }

    stack[++top] = v;  // Push current node to stack
}

// Function to perform topological sort
void topologicalSort(int vertices) {
    for (int i = 0; i < vertices; i++) {
        visited[i] = 0;
    }

    for (int i = 0; i < vertices; i++) {
        if (!visited[i]) {
            dfs(i, vertices);
        }
    }

    printf("\nTopological Sort Order:\n");
    while (top >= 0) {
        printf("%d ", stack[top--]);
    }
    printf("\n");
}

int main() {
    int vertices, edges, u, v;

    printf("Enter number of vertices: ");
    scanf("%d", &vertices);

    printf("Enter number of edges: ");
    scanf("%d", &edges);

    printf("Enter edges (u v) where u -> v:\n");
    for (int i = 0; i < edges; i++) {
        scanf("%d %d", &u, &v);
        addEdge(u, v);
    }

    topologicalSort(vertices);

    return 0;
}
