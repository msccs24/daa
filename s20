Q1

#include <stdio.h>
#include <conio.h>
int a[10][10], n, indegre[10];
void find_indegre()
{
    int j, i, sum;
    for (j = 0; j < n; j++)
    {
        sum = 0;
        for (i = 0; i < n; i++)
            sum += a[i][j];
        indegre[j] = sum;
    }
}
void topology()
{
    int i, u, v, t[10], s[10], top = -1, k = 0;
    find_indegre();
    for (i = 0; i < n; i++)
    {
        if (indegre[i] == 0)
            s[++top] = i;
    }
    while (top != -1)
    {
        u = s[top--];
        t[k++] = u;
        for (v = 0; v < n; v++)
        {
            if (a[u][v] == 1)
            {
                indegre[v]--;
                if (indegre[v] == 0)
                    s[++top] = v;
            }
        }
    }
    printf("The topological Sequence is:\n");
    for (i = 0; i < n; i++)
        printf("%d ", t[i]);
}
void main()
{
    int i, j;
    printf("Enter number of jobs:");
    scanf("%d", &n);
    printf("\nEnter the adjacency matrix:\n");
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < n; j++)
            scanf("%d", &a[i][j]);
    }
    topology();
}

Q2
#include <stdio.h>
#include <stdbool.h>

#define MAX 20

int board[MAX], n;

// Function to print the board configuration
void printSolution() {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (board[i] == j)
                printf("Q ");
            else
                printf(". ");
        }
        printf("\n");
    }
    printf("\n");
}

// Check if a queen can be placed at row r and column c
bool isSafe(int r, int c) {
    for (int i = 0; i < r; i++) {
        if (board[i] == c ||               // Same column
            board[i] - i == c - r ||       // Same major diagonal
            board[i] + i == c + r)         // Same minor diagonal
            return false;
    }
    return true;
}

// Recursive function to solve N-Queens
void solveNQueens(int row) {
    if (row == n) {
        printSolution();  // All queens are placed
        return;
    }

    for (int col = 0; col < n; col++) {
        if (isSafe(row, col)) {
            board[row] = col;
            solveNQueens(row + 1);
            // Backtrack is implicit here by overwriting board[row]
        }
    }
}

int main() {
    printf("Enter the value of N (number of queens): ");
    scanf("%d", &n);

    if (n < 1 || n > MAX) {
        printf("Invalid value of N. Please use 1 <= N <= %d.\n", MAX);
        return 1;
    }

    printf("Solutions for %d-Queens problem:\n\n", n);
    solveNQueens(0);

    return 0;
}
