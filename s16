Q1
// C Program for 0-1 KnapSack Problem using Recursion
#include <stdio.h>

// Function to find maximum between two numbers
int max(int a, int b)
{
    if (a > b)
        return a;
    return b;
}

// Returns the maximum value that can be put in a knapsack
// of capacity W
int knapsackRecursive(int W, int wt[], int val[], int n)
{
    // Base Case
    if (n == 0 || W == 0)
        return 0;

    if (wt[n - 1] > W)
        return knapsackRecursive(W, wt, val, n - 1);

    else
        return max(val[n - 1]
                       + knapsackRecursive(W - wt[n - 1],
                                           wt, val, n - 1),
                   knapsackRecursive(W, wt, val, n - 1));
}
// Driver Code
int main()
{
    int i,n,W,weight[100],values[100];
    printf("Enter the number of items :");
     scanf("%d",&n);   
    for (i = 0; i < n; i++)
    {
        printf("Enter Weight and Profit for item[%d] :\n",i);
        scanf("%d %d", &weight[i], &values[i]);
    } 
    printf("Enter the capacity of knapsack :\n");
    scanf("%d",&W);

    // Output the maximum profit for the knapSack
    printf(
        "Maximum value that can be put in knapsack: %d\n",
        knapsackRecursive(W, weight, values, n));

    return 0;
}


Q2
#include <stdio.h>
#include <stdbool.h>

#define V 5  // Maximum number of vertices

int graph[V][V];     // Adjacency matrix
int path[V];         // Stores the path

// Check if current vertex can be added to Hamiltonian Cycle
bool isSafe(int v, int pos) {
    // Check if this vertex is adjacent to the previous one
    if (graph[path[pos - 1]][v] == 0)
        return false;

    // Check if the vertex is already included in the path
    for (int i = 0; i < pos; i++)
        if (path[i] == v)
            return false;

    return true;
}

// Recursive function to solve Hamiltonian Cycle problem
bool hamiltonianCycleUtil(int pos) {
    // Base case: all vertices are in the path
    if (pos == V) {
        // Check if last vertex is connected to the first
        return graph[path[pos - 1]][path[0]] == 1;
    }

    for (int v = 1; v < V; v++) {
        if (isSafe(v, pos)) {
            path[pos] = v;

            if (hamiltonianCycleUtil(pos + 1))
                return true;

            path[pos] = -1;  // Backtrack
        }
    }

    return false;
}

// Function to start the process
bool hasHamiltonianCycle() {
    for (int i = 0; i < V; i++)
        path[i] = -1;

    path[0] = 0; // Start from vertex 0

    if (hamiltonianCycleUtil(1)) {
        printf("Hamiltonian Cycle Found:\n");
        for (int i = 0; i < V; i++)
            printf("%d -> ", path[i]);
        printf("%d\n", path[0]); // To complete the cycle
        return true;
    } else {
        printf("No Hamiltonian Cycle exists.\n");
        return false;
    }
}

int main() {
    printf("Enter the adjacency matrix (%dx%d):\n", V, V);
    for (int i = 0; i < V; i++)
        for (int j = 0; j < V; j++)
            scanf("%d", &graph[i][j]);

    hasHamiltonianCycle();

    return 0;
}
