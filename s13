Q1
#include <stdio.h>
#include <limits.h>

// Function to find the minimum number of multiplications
int matrixChainMultiplication(int p[], int n) {
    int m[n][n];

    for (int i = 1; i < n; i++)
        m[i][i] = 0;

    for (int L = 2; L < n; L++) {
        for (int i = 1; i < n - L + 1; i++) {
            int j = i + L - 1;
            m[i][j] = INT_MAX;

            for (int k = i; k < j; k++) {
                int cost = m[i][k] + m[k + 1][j] + p[i - 1] * p[k] * p[j];
                if (cost < m[i][j])
                    m[i][j] = cost;
            }
        }
    }

    return m[1][n - 1];
}

int main() {
    int n;

    printf("Enter the number of matrices: ");
    scanf("%d", &n);

    // There will be n+1 dimensions
    int p[n + 1];

    printf("Enter the dimensions (space-separated) of the matrices:\n");
    printf("For example, for 3 matrices A1:10x20 A2:20x30 A3:30x40 enter: 10 20 30 40\n");

    for (int i = 0; i <= n; i++) {
        scanf("%d", &p[i]);
    }

    int minMultiplications = matrixChainMultiplication(p, n + 1);

    printf("Minimum number of multiplications is %d\n", minMultiplications);
    return 0;
}

Q2
#include <stdio.h>

void sortArray(int arr[], int size) {
    for (int i = 0; i < size - 1; i++) {
        for (int j = 0; j < size - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

int binarySearch(int arr[], int size, int target) {
    int left = 0, right = size - 1;
    while (left <= right) {
        int mid = left + (right - left) / 2;
        if (arr[mid] == target)
            return mid; // Return index if found
        if (arr[mid] < target)
            left = mid + 1; // Search right half
        else
            right = mid - 1; // Search left half
    }
    return -1; // Return -1 if not found
}

int main() {
    int size, target;
    printf("Enter the size of the array: ");
    scanf("%d", &size);
    int arr[size];
    printf("Enter %d elements:\n", size);
    for (int i = 0; i < size; i++) {
        scanf("%d", &arr[i]);
    }
    sortArray(arr, size);
    printf("Sorted array: ");
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
    printf("Enter the element to search: ");
    scanf("%d", &target);
    int result = binarySearch(arr, size, target);
    if (result != -1)
        printf("Element %d found at position %d.\n", target, result + 1);
    else
        printf("Element %d not found in the array.\n", target);
    return 0;
}
