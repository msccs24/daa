Q1

#include <stdio.h>
#include <stdbool.h>

#define V 5  // Maximum number of vertices

int graph[V][V];     // Adjacency matrix
int path[V];         // Stores the path

// Check if current vertex can be added to Hamiltonian Cycle
bool isSafe(int v, int pos) {
    // Check if this vertex is adjacent to the previous one
    if (graph[path[pos - 1]][v] == 0)
        return false;

    // Check if the vertex is already included in the path
    for (int i = 0; i < pos; i++)
        if (path[i] == v)
            return false;

    return true;
}

// Recursive function to solve Hamiltonian Cycle problem
bool hamiltonianCycleUtil(int pos) {
    // Base case: all vertices are in the path
    if (pos == V) {
        // Check if last vertex is connected to the first
        return graph[path[pos - 1]][path[0]] == 1;
    }

    for (int v = 1; v < V; v++) {
        if (isSafe(v, pos)) {
            path[pos] = v;

            if (hamiltonianCycleUtil(pos + 1))
                return true;

            path[pos] = -1;  // Backtrack
        }
    }

    return false;
}

// Function to start the process
bool hasHamiltonianCycle() {
    for (int i = 0; i < V; i++)
        path[i] = -1;

    path[0] = 0; // Start from vertex 0

    if (hamiltonianCycleUtil(1)) {
        printf("Hamiltonian Cycle Found:\n");
        for (int i = 0; i < V; i++)
            printf("%d -> ", path[i]);
        printf("%d\n", path[0]); // To complete the cycle
        return true;
    } else {
        printf("No Hamiltonian Cycle exists.\n");
        return false;
    }
}

int main() {
    printf("Enter the adjacency matrix (%dx%d):\n", V, V);
    for (int i = 0; i < V; i++)
        for (int j = 0; j < V; j++)
            scanf("%d", &graph[i][j]);

    hasHamiltonianCycle();

    return 0;
}

Q2
#include <stdio.h>
#include <stdbool.h>

#define MAX 20

int board[MAX], n;

// Function to print the board configuration
void printSolution() {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (board[i] == j)
                printf("Q ");
            else
                printf(". ");
        }
        printf("\n");
    }
    printf("\n");
}

// Check if a queen can be placed at row r and column c
bool isSafe(int r, int c) {
    for (int i = 0; i < r; i++) {
        if (board[i] == c ||               // Same column
            board[i] - i == c - r ||       // Same major diagonal
            board[i] + i == c + r)         // Same minor diagonal
            return false;
    }
    return true;
}

// Recursive function to solve N-Queens
void solveNQueens(int row) {
    if (row == n) {
        printSolution();  // All queens are placed
        return;
    }

    for (int col = 0; col < n; col++) {
        if (isSafe(row, col)) {
            board[row] = col;
            solveNQueens(row + 1);
            // Backtrack is implicit here by overwriting board[row]
        }
    }
}

int main() {
    printf("Enter the value of N (number of queens): ");
    scanf("%d", &n);

    if (n < 1 || n > MAX) {
        printf("Invalid value of N. Please use 1 <= N <= %d.\n", MAX);
        return 1;
    }

    printf("Solutions for %d-Queens problem:\n\n", n);
    solveNQueens(0);

    return 0;
}
